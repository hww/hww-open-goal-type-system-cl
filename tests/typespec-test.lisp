(in-package :type-system-test)

(defun type-tag-test ()
  (let ((ts (typespec-new :baz)))
    (check-equal? (to-str ts) "BAZ")
    (check-equal? (typespec-basetype ts) :baz)
    (let ((ts (typespec-new :bazz nil :x 1 :y 2)))
      (check-equal? (to-str ts) "(BAZZ () :X 1 :Y 2)")
      (check-equal? (typespec-basetype ts) :bazz)
      )))

(defun typespec-tags-test()
  (check-equal? (type-tag-new :foo 1) (type-tag-new :foo 1))
  (check-not-equal? (type-tag-new :foo 1) (type-tag-new :bar 1))
  (check-not-equal? (type-tag-new :foo 1) (type-tag-new :foo 2))
  (let ((ts (typespec-new :baz)))
    (typespec-add-new-tag ts :foo 1)
    (typespec-add-new-tag ts :bar 2)
    (check-equal? (to-str ts)  "(BAZ () :FOO 1 :BAR 2)")
    (check-equal? (typespec-try-get-tag ts :foo) (type-tag-new :foo 1))
    (typespec-modify-tag ts :foo 3)
    (check-equal? (typespec-try-get-tag ts :foo) (type-tag-new :foo 3))
    (typespec-add-or-modify-tag ts :baz 4)
    (check-equal? (typespec-try-get-tag ts :baz) (type-tag-new :baz 4))
    ))

(defun typespec-args-test ()
  ;; Create the signature: (foo int int)
  (let ((ts (typespec-new :foo))
	(int (typespec-new :int)))
    (typespec-args-add ts int)
    (typespec-args-add ts int)
    (check-equal? (to-str ts)  "(FOO (INT INT))")
    (check-equal? (typespec-args-ref ts 0) (typespec-new :int))
    (check-equal? (typespec-args-count ts) 2)
    ))

(defun typespec-test ()
  (type-tag-test)
  (typespec-tags-test)
  (typespec-args-test)
  )
