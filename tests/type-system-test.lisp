(in-package :type-system/test)
(use-package :type-system)

(defun type-system-forward-declare-test ()
  (let ((this (type-system-new)))
    (check-equal? (forward-declared-types-find this "object") nil)
    (forward-declare-type-as-type this "foo")
    (let ((other (forward-declared-types-find this "foo")))
      (check-equal? other "object"))))


(defun type-system-type-spec-test ()
  (let ((this (type-system-new)))
    (forward-declare-type-as-type this "foo")
    (forward-declare-type-as-type this "bar")
    (let ((obj (make-a-typespec this "object"))
          (foo (make-a-typespec this "foo"))
          (bar (make-a-typespec this "bar")))
      (check-equal? obj (typespec-new "object"))
      (check-equal? foo (typespec-new "foo"))
      (check-true (tc this obj foo))
      (check-true (tc this obj foo))
      (check-equal? (lowest-common-ancestor this foo bar) (typespec-new "object"))
      (check-equal? (get-path-up-tree this "foo") '("foo" "object"))
      (check-equal? (get-path-up-tree this "bar") '("bar" "object"))
      )))


(defun type-system-get-path-test ()
  (let ((this (type-system-new)))
    (forward-declare-type-as-type this "foo")
    (check-equal? (get-path-up-tree this "object") '("object"))
    (check-equal? (get-path-up-tree this "foo") '("foo" "object"))))

(defun run-type-system-test ()
  (type-system-forward-declare-test)
  (type-system-type-spec-test)
  (type-system-get-path-test))

(defparameter *ts* (type-system-new))
(forward-declare-type-as-type *ts* "foo")
(forward-declare-type-as-type *ts* "bar")
(defparameter obj (make-a-typespec *ts* "object"))
(defparameter foo (make-a-typespec *ts* "foo"))
(defparameter bar (make-a-typespec *ts* "bar"))
(check-equal? obj (typespec-new "object"))
(check-equal? foo (typespec-new "foo"))
(check-true (tc *ts* obj foo))
(check-true (tc *ts* obj foo))
(print (lowest-common-ancestor *ts* foo bar))
